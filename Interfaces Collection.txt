using System;
using System.Collections.Generic;


namespace Collection_Interfaces
{
    /*
     *           1. Introduction to Collections in C#
                         In C#, collections are data structures used to store groups of objects.
                         Unlike arrays, collections can grow and shrink dynamically, offering more flexibility in managing groups of objects. 
                         Collections are categorized based on their characteristics and operations they support, such as lists, queues, stacks, sets, and dictionaries.

                 2. Understanding Collection Interfaces
                         Collection interfaces define the operations (methods) and properties that a collection must implement.
                         These interfaces (Contracts) are part of the .NET Framework's System.Collections and System.Collections.Generic namespaces. 
                         The use of interfaces allows developers to design functions and methods that can operate on multiple types of collections,
                         improving code reusability and flexibility.
     
                 3. Key Collection Interfaces in C#
                           => IEnumerable & IEnumerable<T>: The base interface for all collections, providing support for simple iteration over a collection.
                           => ICollection & ICollection<T>: Extends IEnumerable with methods for adding, removing, and counting elements.
                           => IList & IList<T>: Extends ICollection to provide methods for indexed access, adding, removing, and inserting elements.
                           => IDictionary & IDictionary<TKey, TValue>: Defines methods for managing a collection of key/value pairs, allowing for fast lookups.
                           => ISet & ISet<T>: Provides the abstraction for a collection that ensures no duplicate elements.
                 4. Benefits of Using Collection Interfaces
                             Abstraction: Interfaces provide a way to abstract the collection's implementation details, allowing developers to work with collections in a consistent manner.
                             Flexibility: By programming against interfaces, it's easy to switch between different collection implementations without changing the consuming code.
                             Interoperability: Interfaces allow collections to be passed between methods and classes that operate on abstract collection types, enhancing modularity and code reuse.
                             Type Safety: Generic collection interfaces (e.g., ICollection<T>) provide type safety by ensuring that only objects of a specified type are added to the collection.

    */
    internal class Program
    {
        static void Main(string[] args)
        {
        }
    }
}
