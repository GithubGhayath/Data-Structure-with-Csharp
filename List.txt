using System;
using System.Collections.Generic;
using System.Linq;

namespace Important
{
    public class clsPerson
    {
        public clsPerson(string name,int age)
        {
            this.Age = age;
            this.Name = name;
        }

       public string Name { get; set; }
       public int Age { get; set; }

        
    }


    internal class Program
    {
        static void Main(string[] args)
        {
            /*
                1 => List <T>
                2 => Part of system.Generic.Collection [Generic-datastructure]
                3 => Dynamic resize
                4 => Zero based index like array Support Random Access
                5 => strongly typed
            */




            //-----------------------------------------------------------------------------------------------------------
            //***********************************************************************************************************
            //-----------------------------------------------------------------------------------------------------------




            //                                                  **WORGING WITH LIST IN C# :

            List<int> Numbers = new List<int>();

            //Add Elements:
            Numbers.Add(1);
            Numbers.Add(2);
            Numbers.Add(3);
            Numbers.Add(4);
            Numbers.Add(5);
            Numbers.Add(6);
            Numbers.Add(7);


            //Random Access:
            Console.WriteLine("List Elements : ");
            Console.Write(Numbers[0] + " ");
            Console.Write(Numbers[1] + " ");
            Console.Write(Numbers[2] + " ");
            Console.Write(Numbers[3] + " ");
            Console.Write(Numbers[4] + " ");
            Console.Write(Numbers[5] + " ");
            Console.Write(Numbers[6]);

            Console.WriteLine("\n\nChanging the value of item 2 of list to 500");
            Numbers[1] = 500;
            Console.Write("\nAfter Change : " + Numbers[1]);


            //-----------------------------------------------------------------------------------------------------------
            //***********************************************************************************************************
            //-----------------------------------------------------------------------------------------------------------
     



            //Insert to list :
            List<int> Numbers1 = new List<int> { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };


            //Insert element at a specific position
            Numbers1.Insert(0, 0);
            Console.WriteLine("\n\nElements After Insert 0 At index 0 : " + string.Join(" , ", Numbers1));


            //Insert Multiple elements
            Numbers1.InsertRange(0, new List<int> { -4, -3, -2, -1 });
            Console.WriteLine("\n\nElements After Insert Range { -4, -3, -2, -1 } at 0 index : " + string.Join(" , ", Numbers1));



            //-----------------------------------------------------------------------------------------------------------
            //***********************************************************************************************************
            //-----------------------------------------------------------------------------------------------------------



            List<string> Names = new List<string> { "Ghayath", "John", "Ali", "Maya", "Ola", "Sara", "Yara", "Zeen", "Zead", "Qusi" };

            //Remove Item: 

            //Removing an item by value
            Names.Remove("Ghayath");
            Console.WriteLine("\n\nList After Remove 'Ghayath' : " + string.Join(" , ", Names));

            //Removing an item by Index
            Names.RemoveAt(1);
            Console.WriteLine("\n\nList After Remove Item in pos:1  : " + string.Join(" , ", Names));


            //Removing multiple items
            Names.RemoveAll(name => name.Length > 3);
            Console.WriteLine("\n\nList After Remove Items > 3 letters  : " + string.Join(" , ", Names));


            //Clearing the list 
            Names.Clear();


            //-----------------------------------------------------------------------------------------------------------
            //***********************************************************************************************************
            //-----------------------------------------------------------------------------------------------------------


            //Looping Through a list :
            List<int> Numbers2 = new List<int> { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 };

            Console.WriteLine("\n\n\nElements With normal loop : ");
            for (int i = 0; i < Numbers2.Count; i++)
            {
                Console.Write(Numbers2[i] + " ");
            }

            Console.WriteLine("\n\n\nElements With Foreach loop : ");
            foreach(int Num in Numbers2)
            {
                Console.Write(Num + " ");
            }

            Console.WriteLine("\n\nElement With List.Foreach :");
            Numbers2.ForEach(N => Console.Write(N + " "));

            //-----------------------------------------------------------------------------------------------------------
            //***********************************************************************************************************
            //-----------------------------------------------------------------------------------------------------------



            //Aggregating Data Using LINQ with list
            List<int> Numbers4 = new List<int> { 1, 2, 3, 4, 5, 6 };


            Console.WriteLine("\n\n\n\nList Elements :");
            Numbers4.ForEach(Num => Console.Write(Num + " "));

            //Aggregation operations:
            Console.WriteLine("\n\nThe Sum Of Elements using LINQ => sum() : " + Numbers4.Sum());
            Console.WriteLine("\nThe Average Of Elements using LINQ => Average() : " + Numbers4.Average());
            Console.WriteLine("\nThe Max Number In List LINQ => Max() : " + Numbers4.Max());
            Console.WriteLine("\nThe Min Number In List LINQ => Min() : " + Numbers4.Min());
            Console.WriteLine("\nThe Count Elements In List LINQ => Count() : " + Numbers4.Count());



            //-----------------------------------------------------------------------------------------------------------
            //***********************************************************************************************************
            //-----------------------------------------------------------------------------------------------------------

            //Filtering Data with LINQ C# using list
            List<int> Numbers5 = new List<int> { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };

            Console.WriteLine("\n\n\n\nList Elements :");
            Numbers5.ForEach(Num => Console.Write(Num + " "));


            //LINQ Filtering
            Console.WriteLine("\n\nEven Numbers : " + string.Join(" , ", Numbers5.Where(n => n % 2 == 0)));
            Console.WriteLine("\nOdd Numbers : " + string.Join(" , " , Numbers5.Where(n => n % 2 != 0)));
            Console.WriteLine("\nNumbers Greater then 5 : " + string.Join(" , ", Numbers5.Where(n => n > 5)));
            Console.WriteLine("\nEvery Second Number : " + string.Join(" , ", Numbers5.Where((n, index) => index % 2 == 1)));
            Console.WriteLine("\nNumbers between 3 and 8 : " + string.Join(" , ", Numbers5.Where(n => n > 3 && n < 8)));


            //-----------------------------------------------------------------------------------------------------------
            //***********************************************************************************************************
            //-----------------------------------------------------------------------------------------------------------

            //Sorting a list in c# using various methods
            List<int> Numbers6 = new List<int> { 5, 1, 7, 2, 3, 4, 10, 6, 8, 9 };

            Console.WriteLine("\n\n\n\nList Elements :");
            Numbers6.ForEach(Num => Console.Write(Num + " "));



            //Default sorting Ascending
            Numbers6.Sort();
            Console.WriteLine("\n\nThe Elements After Sorting Ascending : " + string.Join(" , ", Numbers6));

            //Sorting in Descending order 
            Numbers6.Reverse();
            Console.WriteLine("The Elements After Sorting Descending : " + string.Join(" , ", Numbers6));

            //Sorting with LINQ
            Console.WriteLine("\n\nThe Elements After Sorting Ascending with LINQ : " + string.Join(" , ", Numbers6.OrderBy(n => n)));
            Console.WriteLine("The Elements After Sorting Descending with LINQ : " + string.Join(" , ", Numbers6.OrderByDescending(n => n)));


            //-----------------------------------------------------------------------------------------------------------
            //***********************************************************************************************************
            //-----------------------------------------------------------------------------------------------------------

            // (Contains , Exists , Find , FindAll , Any ) With List:

            List<int> Numbers7 = new List<int> { 44, 22, -55, 9, 666, -6, 425, 11, 5, 2 };


            Console.WriteLine("\n\n\n\nList Elements :");
            Numbers7.ForEach(Num => Console.Write(Num + " "));




            Console.WriteLine("\n\nList Contains 9 : " + Numbers7.Contains(9));
            Console.WriteLine("List Exists negative number : " + Numbers7.Exists(n => n < 0));
            Console.WriteLine("First Negative number in list : " + Numbers7.Find(n => n < 0));
            Console.WriteLine("All Negative number in list : " + string.Join(" , ", Numbers7.FindAll(n => n < 0)));
            Console.WriteLine("Any number greater then 100 : " + Numbers7.Any(n => n > 100));


            //-----------------------------------------------------------------------------------------------------------
            //***********************************************************************************************************
            //-----------------------------------------------------------------------------------------------------------


            List<string> Names1 = new List<string> { "Ghayath", "John", "Ali", "Maya", "Ola", "Sara", "Yara", "Zeen", "Zead", "Qusi" };
           
            
            Console.WriteLine("\n\n\n\nList Elements :");
            Names1.ForEach(Num => Console.Write(Num + " - "));


            Console.WriteLine("\n\nList Contains 'Ghayath' : " + Names1.Contains("Ghayath"));
            Console.WriteLine("List Exists length > 3 : " + Names1.Exists(n => n.Length > 3));
            Console.WriteLine("First Name length > 4 in list : " + Names1.Find(n => n.Length > 4)) ;
            Console.WriteLine("All Names length > 3 in list : " + string.Join(" , ", Names1.FindAll(n => n.Length > 3)));
            Console.WriteLine("Any Name Start with 'S' : " + Names1.Any(n => n.StartsWith("S")));
            Console.WriteLine("Any Name Start with 'I' : " + Names1.Any(n => n.StartsWith("I")));

            //-----------------------------------------------------------------------------------------------------------
            //***********************************************************************************************************
            //-----------------------------------------------------------------------------------------------------------

            //List<CustomObjects>



            List<clsPerson> people = new List<clsPerson>
            {
                new clsPerson("Ali",20),
                new clsPerson("Maher",10),
                new clsPerson("Ola",24),
                new clsPerson("Maya",15),
                new clsPerson("Yara",12),
                new clsPerson("Majd",24),
                new clsPerson("John",25),
                new clsPerson("Amal",11),
                new clsPerson("Angel",12),
                new clsPerson("Ghayath",20)
            };


            //Iterating over the list and prainting details of each person
            Console.WriteLine("\n\n\n\n--------------------------- Current state of the people list :");
            foreach (clsPerson Person in people)
            {
                Console.WriteLine($"Name :   {Person.Name}  \t\t\tAge : {Person.Age}");
            }


            //Using Find
            Console.WriteLine("\n\n---------------------------Perosn you looking for is : ");
            clsPerson PersonInfo = people.Find(p => p.Name == "Ali");
            if(PersonInfo !=null)
            {
                Console.WriteLine($"Name :   {PersonInfo.Name}  \tAge : {PersonInfo.Age}");
            }


            //Finding and updating the age of a person named 'Yara'
            Console.WriteLine("\n\n\n---------------------------Update Yara's Age : ");
            clsPerson Yara = people.FirstOrDefault(p => p.Name == "Yara");
            if(Yara!=null) 
            {
                Yara.Age = 22;
                Console.WriteLine($"Name :   {Yara.Name}  \tAge : {Yara.Age}");

            }

            /*
             * Find ====> method in list
             * FirstOrDefault =====> method in LINQ
             */

            var Persons = people.FindAll(p => p.Age >= 20);
            Console.WriteLine("\n\n\n---------------------------All Persons their Ages > 20 year : ");
            foreach(var Person in Persons)
            {
                Console.WriteLine($"Name :   {Person.Name}  \tAge : {Person.Age}");
            }


            //Using Any to check by name
            bool Isfound = people.Any(p => p.Name == "Ghayath");
            Console.WriteLine("\n\n\n---------------------------The Person Name 'Ghayath' = " + Isfound.ToString());

            //Using Exists
            bool IsExists = people.Exists(p => p.Age > 40);
            Console.WriteLine("\n\n\n---------------------------The Person Age > 40  = " + IsExists.ToString());

            //Using Remove All
            people.RemoveAll(p => p.Age <= 15);
            Console.WriteLine("---------------------------List After remove all people thier age <=15 :");
            foreach (clsPerson Person in people)
            {
                Console.WriteLine($"Name :   {Person.Name}  \tAge : {Person.Age}");
            }

            //-----------------------------------------------------------------------------------------------------------
            //***********************************************************************************************************
            //-----------------------------------------------------------------------------------------------------------

            //Converting a List to an Array

            List<int> list = new List<int> { 1, 2, 3, 4, 5, 6, 7, 8 };
            int[] Array = list.ToArray();

            Console.WriteLine("\n\n\n\nList After Convert to Array : " + string.Join(" , ", Array));


            //-----------------------------------------------------------------------------------------------------------
            //***********************************************************************************************************
            //-----------------------------------------------------------------------------------------------------------

            //Converting an Array to a List

            int[] Array1 = { 1, 2, 3, 4, 5, 6, 7, 8 };
            List<int> list1 = new List<int>(Array1);

            Console.WriteLine("\n\n\n\nArray After Convert to List : " + string.Join(" , ", list1));





            /*
                                                              Exists VS Any:   
                             
                        In C# both Exists and Any are methods used for collection manipulation typically with list or arrays
                        The Deffrence Between Them :

                        -Exists:
                                    *Provided by the list
                                    *Return Boolean type
                        -Any:
                                    *Any is a LINQ extension method available for any collection implementing the IEnumerable<T>
                                    *Return Boolean type



            ==> Both Methods serve similar purposes ,but Exists is more specialized for lists 
            while Any is more versatile and can be used with any enumerable collectioin   

             */










            //Done By Ghayath.....



            Console.ReadKey();
        }
    }
}
